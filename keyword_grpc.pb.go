// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.21.2
// source: keyword.proto

package pbkeyword

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// UpdateAssociationTableServiceClient is the client API for UpdateAssociationTableService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type UpdateAssociationTableServiceClient interface {
	UpdateAssociationTableFunc(ctx context.Context, in *UpdateAssociationTableRequest, opts ...grpc.CallOption) (*EmptyMessage, error)
}

type updateAssociationTableServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewUpdateAssociationTableServiceClient(cc grpc.ClientConnInterface) UpdateAssociationTableServiceClient {
	return &updateAssociationTableServiceClient{cc}
}

func (c *updateAssociationTableServiceClient) UpdateAssociationTableFunc(ctx context.Context, in *UpdateAssociationTableRequest, opts ...grpc.CallOption) (*EmptyMessage, error) {
	out := new(EmptyMessage)
	err := c.cc.Invoke(ctx, "/UpdateAssociationTableService/UpdateAssociationTableFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// UpdateAssociationTableServiceServer is the server API for UpdateAssociationTableService service.
// All implementations must embed UnimplementedUpdateAssociationTableServiceServer
// for forward compatibility
type UpdateAssociationTableServiceServer interface {
	UpdateAssociationTableFunc(context.Context, *UpdateAssociationTableRequest) (*EmptyMessage, error)
	mustEmbedUnimplementedUpdateAssociationTableServiceServer()
}

// UnimplementedUpdateAssociationTableServiceServer must be embedded to have forward compatible implementations.
type UnimplementedUpdateAssociationTableServiceServer struct {
}

func (UnimplementedUpdateAssociationTableServiceServer) UpdateAssociationTableFunc(context.Context, *UpdateAssociationTableRequest) (*EmptyMessage, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateAssociationTableFunc not implemented")
}
func (UnimplementedUpdateAssociationTableServiceServer) mustEmbedUnimplementedUpdateAssociationTableServiceServer() {
}

// UnsafeUpdateAssociationTableServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to UpdateAssociationTableServiceServer will
// result in compilation errors.
type UnsafeUpdateAssociationTableServiceServer interface {
	mustEmbedUnimplementedUpdateAssociationTableServiceServer()
}

func RegisterUpdateAssociationTableServiceServer(s grpc.ServiceRegistrar, srv UpdateAssociationTableServiceServer) {
	s.RegisterService(&UpdateAssociationTableService_ServiceDesc, srv)
}

func _UpdateAssociationTableService_UpdateAssociationTableFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateAssociationTableRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(UpdateAssociationTableServiceServer).UpdateAssociationTableFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/UpdateAssociationTableService/UpdateAssociationTableFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(UpdateAssociationTableServiceServer).UpdateAssociationTableFunc(ctx, req.(*UpdateAssociationTableRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// UpdateAssociationTableService_ServiceDesc is the grpc.ServiceDesc for UpdateAssociationTableService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var UpdateAssociationTableService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "UpdateAssociationTableService",
	HandlerType: (*UpdateAssociationTableServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "UpdateAssociationTableFunc",
			Handler:    _UpdateAssociationTableService_UpdateAssociationTableFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyword.proto",
}

// FetchKeywordsServiceClient is the client API for FetchKeywordsService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FetchKeywordsServiceClient interface {
	FetchKeywordsFunc(ctx context.Context, in *FetchKeywordsRequest, opts ...grpc.CallOption) (*FetchKeywordsResponse, error)
}

type fetchKeywordsServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewFetchKeywordsServiceClient(cc grpc.ClientConnInterface) FetchKeywordsServiceClient {
	return &fetchKeywordsServiceClient{cc}
}

func (c *fetchKeywordsServiceClient) FetchKeywordsFunc(ctx context.Context, in *FetchKeywordsRequest, opts ...grpc.CallOption) (*FetchKeywordsResponse, error) {
	out := new(FetchKeywordsResponse)
	err := c.cc.Invoke(ctx, "/FetchKeywordsService/FetchKeywordsFunc", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FetchKeywordsServiceServer is the server API for FetchKeywordsService service.
// All implementations must embed UnimplementedFetchKeywordsServiceServer
// for forward compatibility
type FetchKeywordsServiceServer interface {
	FetchKeywordsFunc(context.Context, *FetchKeywordsRequest) (*FetchKeywordsResponse, error)
	mustEmbedUnimplementedFetchKeywordsServiceServer()
}

// UnimplementedFetchKeywordsServiceServer must be embedded to have forward compatible implementations.
type UnimplementedFetchKeywordsServiceServer struct {
}

func (UnimplementedFetchKeywordsServiceServer) FetchKeywordsFunc(context.Context, *FetchKeywordsRequest) (*FetchKeywordsResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method FetchKeywordsFunc not implemented")
}
func (UnimplementedFetchKeywordsServiceServer) mustEmbedUnimplementedFetchKeywordsServiceServer() {}

// UnsafeFetchKeywordsServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FetchKeywordsServiceServer will
// result in compilation errors.
type UnsafeFetchKeywordsServiceServer interface {
	mustEmbedUnimplementedFetchKeywordsServiceServer()
}

func RegisterFetchKeywordsServiceServer(s grpc.ServiceRegistrar, srv FetchKeywordsServiceServer) {
	s.RegisterService(&FetchKeywordsService_ServiceDesc, srv)
}

func _FetchKeywordsService_FetchKeywordsFunc_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(FetchKeywordsRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FetchKeywordsServiceServer).FetchKeywordsFunc(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/FetchKeywordsService/FetchKeywordsFunc",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FetchKeywordsServiceServer).FetchKeywordsFunc(ctx, req.(*FetchKeywordsRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// FetchKeywordsService_ServiceDesc is the grpc.ServiceDesc for FetchKeywordsService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FetchKeywordsService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "FetchKeywordsService",
	HandlerType: (*FetchKeywordsServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "FetchKeywordsFunc",
			Handler:    _FetchKeywordsService_FetchKeywordsFunc_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "keyword.proto",
}
